{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport NativeReanimatedModule from \"./NativeReanimated\";\nfunction jsListener(eventName, handler) {\n  return function (evt) {\n    handler(_extends(_extends({}, evt.nativeEvent), {\n      eventName: eventName\n    }));\n  };\n}\nvar WorkletEventHandler = function () {\n  function WorkletEventHandler(worklet) {\n    var eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, WorkletEventHandler);\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.reattachNeeded = false;\n    this.listeners = {};\n    this.viewTag = undefined;\n    this.registrations = [];\n    if (!NativeReanimatedModule.native) {\n      this.listeners = eventNames.reduce(function (acc, eventName) {\n        acc[eventName] = jsListener(eventName, worklet);\n        return acc;\n      }, {});\n    }\n  }\n  _createClass(WorkletEventHandler, [{\n    key: \"updateWorklet\",\n    value: function updateWorklet(newWorklet) {\n      this.worklet = newWorklet;\n      this.reattachNeeded = true;\n    }\n  }, {\n    key: \"registerForEvents\",\n    value: function registerForEvents(viewTag, fallbackEventName) {\n      var _this = this;\n      this.viewTag = viewTag;\n      this.registrations = this.eventNames.map(function (eventName) {\n        return NativeReanimatedModule.registerEventHandler(viewTag + eventName, _this.worklet);\n      });\n      if (this.registrations.length === 0 && fallbackEventName) {\n        this.registrations.push(NativeReanimatedModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n      }\n    }\n  }, {\n    key: \"unregisterFromEvents\",\n    value: function unregisterFromEvents() {\n      this.registrations.forEach(function (id) {\n        return NativeReanimatedModule.unregisterEventHandler(id);\n      });\n      this.registrations = [];\n    }\n  }]);\n  return WorkletEventHandler;\n}();\nexport { WorkletEventHandler as default };","map":{"version":3,"names":["NativeReanimatedModule","jsListener","eventName","handler","evt","_extends","nativeEvent","WorkletEventHandler","worklet","eventNames","arguments","length","undefined","_classCallCheck","reattachNeeded","listeners","viewTag","registrations","native","reduce","acc","_createClass","key","value","updateWorklet","newWorklet","registerForEvents","fallbackEventName","_this","map","registerEventHandler","push","unregisterFromEvents","forEach","id","unregisterEventHandler","default"],"sources":["/home/temo/Desktop/working/Android/Climbing In Georgia Mobile/node_modules/react-native-reanimated/lib/reanimated2/WorkletEventHandler.js"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nfunction jsListener(eventName, handler) {\n    return (evt) => {\n        handler(Object.assign(Object.assign({}, evt.nativeEvent), { eventName }));\n    };\n}\nexport default class WorkletEventHandler {\n    constructor(worklet, eventNames = []) {\n        this.worklet = worklet;\n        this.eventNames = eventNames;\n        this.reattachNeeded = false;\n        this.listeners = {};\n        this.viewTag = undefined;\n        this.registrations = [];\n        if (!NativeReanimatedModule.native) {\n            this.listeners = eventNames.reduce((acc, eventName) => {\n                acc[eventName] = jsListener(eventName, worklet);\n                return acc;\n            }, {});\n        }\n    }\n    updateWorklet(newWorklet) {\n        this.worklet = newWorklet;\n        this.reattachNeeded = true;\n    }\n    registerForEvents(viewTag, fallbackEventName) {\n        this.viewTag = viewTag;\n        this.registrations = this.eventNames.map((eventName) => NativeReanimatedModule.registerEventHandler(viewTag + eventName, this.worklet));\n        if (this.registrations.length === 0 && fallbackEventName) {\n            this.registrations.push(NativeReanimatedModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n        }\n    }\n    unregisterFromEvents() {\n        this.registrations.forEach((id) => NativeReanimatedModule.unregisterEventHandler(id));\n        this.registrations = [];\n    }\n}\n"],"mappings":";;;AAAA,OAAOA,sBAAsB;AAC7B,SAASC,UAAUA,CAACC,SAAS,EAAEC,OAAO,EAAE;EACpC,OAAO,UAACC,GAAG,EAAK;IACZD,OAAO,CAACE,QAAA,CAAcA,QAAA,CAAc,CAAC,CAAC,EAAED,GAAG,CAACE,WAAW,CAAC,EAAE;MAAEJ,SAAS,EAATA;IAAU,CAAC,CAAC,CAAC;EAC7E,CAAC;AACL;AAAC,IACoBK,mBAAmB;EACpC,SAAAA,oBAAYC,OAAO,EAAmB;IAAA,IAAjBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAAG,eAAA,OAAAN,mBAAA;IAChC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACK,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,OAAO,GAAGJ,SAAS;IACxB,IAAI,CAACK,aAAa,GAAG,EAAE;IACvB,IAAI,CAACjB,sBAAsB,CAACkB,MAAM,EAAE;MAChC,IAAI,CAACH,SAAS,GAAGN,UAAU,CAACU,MAAM,CAAC,UAACC,GAAG,EAAElB,SAAS,EAAK;QACnDkB,GAAG,CAAClB,SAAS,CAAC,GAAGD,UAAU,CAACC,SAAS,EAAEM,OAAO,CAAC;QAC/C,OAAOY,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;EACJ;EAACC,YAAA,CAAAd,mBAAA;IAAAe,GAAA;IAAAC,KAAA,EACD,SAAAC,cAAcC,UAAU,EAAE;MACtB,IAAI,CAACjB,OAAO,GAAGiB,UAAU;MACzB,IAAI,CAACX,cAAc,GAAG,IAAI;IAC9B;EAAC;IAAAQ,GAAA;IAAAC,KAAA,EACD,SAAAG,kBAAkBV,OAAO,EAAEW,iBAAiB,EAAE;MAAA,IAAAC,KAAA;MAC1C,IAAI,CAACZ,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACC,aAAa,GAAG,IAAI,CAACR,UAAU,CAACoB,GAAG,CAAC,UAAC3B,SAAS;QAAA,OAAKF,sBAAsB,CAAC8B,oBAAoB,CAACd,OAAO,GAAGd,SAAS,EAAE0B,KAAI,CAACpB,OAAO,CAAC;MAAA,EAAC;MACvI,IAAI,IAAI,CAACS,aAAa,CAACN,MAAM,KAAK,CAAC,IAAIgB,iBAAiB,EAAE;QACtD,IAAI,CAACV,aAAa,CAACc,IAAI,CAAC/B,sBAAsB,CAAC8B,oBAAoB,CAACd,OAAO,GAAGW,iBAAiB,EAAE,IAAI,CAACnB,OAAO,CAAC,CAAC;MACnH;IACJ;EAAC;IAAAc,GAAA;IAAAC,KAAA,EACD,SAAAS,qBAAA,EAAuB;MACnB,IAAI,CAACf,aAAa,CAACgB,OAAO,CAAC,UAACC,EAAE;QAAA,OAAKlC,sBAAsB,CAACmC,sBAAsB,CAACD,EAAE,CAAC;MAAA,EAAC;MACrF,IAAI,CAACjB,aAAa,GAAG,EAAE;IAC3B;EAAC;EAAA,OAAAV,mBAAA;AAAA;AAAA,SA7BgBA,mBAAmB,IAAA6B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}