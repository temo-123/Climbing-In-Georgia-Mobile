{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractTransform;\nexports.props2transform = props2transform;\nexports.transformToMatrix = transformToMatrix;\nexports.transformsArrayToProps = transformsArrayToProps;\nvar _Matrix2D = require(\"../Matrix2D\");\nvar _transform = require(\"./transform\");\nfunction appendTransformProps(props) {\n  var x = props.x,\n    y = props.y,\n    originX = props.originX,\n    originY = props.originY,\n    scaleX = props.scaleX,\n    scaleY = props.scaleY,\n    rotation = props.rotation,\n    skewX = props.skewX,\n    skewY = props.skewY;\n  (0, _Matrix2D.appendTransform)(x + originX, y + originY, scaleX, scaleY, rotation, skewX, skewY, originX, originY);\n}\nfunction universal2axis(universal, axisX, axisY, defaultValue) {\n  var x;\n  var y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    var coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\nfunction transformsArrayToProps(transformObjectsArray) {\n  var props = {};\n  transformObjectsArray === null || transformObjectsArray === void 0 ? void 0 : transformObjectsArray.forEach(function (transformObject) {\n    var keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error('You must specify exactly one property per transform object.');\n    }\n    var key = keys[0];\n    var value = transformObject[key];\n    props[key] = value;\n  });\n  return props;\n}\nfunction props2transform(props) {\n  if (!props) {\n    return null;\n  }\n  var extractedProps = Array.isArray(props) ? transformsArrayToProps(props) : props;\n  var rotation = extractedProps.rotation,\n    translate = extractedProps.translate,\n    translateX = extractedProps.translateX,\n    translateY = extractedProps.translateY,\n    origin = extractedProps.origin,\n    originX = extractedProps.originX,\n    originY = extractedProps.originY,\n    scale = extractedProps.scale,\n    scaleX = extractedProps.scaleX,\n    scaleY = extractedProps.scaleY,\n    skew = extractedProps.skew,\n    skewX = extractedProps.skewX,\n    skewY = extractedProps.skewY,\n    x = extractedProps.x,\n    y = extractedProps.y;\n  if (rotation == null && translate == null && translateX == null && translateY == null && origin == null && originX == null && originY == null && scale == null && scaleX == null && scaleY == null && skew == null && skewX == null && skewY == null && x == null && y == null) {\n    return null;\n  }\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn('Passing SvgLengthList to x or y attribute where SvgLength expected');\n  }\n  var tr = universal2axis(translate, translateX || (Array.isArray(x) ? x[0] : x), translateY || (Array.isArray(y) ? y[0] : y));\n  var or = universal2axis(origin, originX, originY);\n  var sc = universal2axis(scale, scaleX, scaleY, 1);\n  var sk = universal2axis(skew, skewX, skewY);\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1]\n  };\n}\nfunction transformToMatrix(props, transform) {\n  if (!props && !transform) {\n    return null;\n  }\n  (0, _Matrix2D.reset)();\n  props && appendTransformProps(props);\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        var columnMatrix = transform;\n        (0, _Matrix2D.append)(columnMatrix[0], columnMatrix[1], columnMatrix[2], columnMatrix[3], columnMatrix[4], columnMatrix[5]);\n      } else {\n        var transformProps = props2transform(transformsArrayToProps(transform));\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        var t = (0, _transform.parse)(transform);\n        (0, _Matrix2D.append)(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      var _transformProps = props2transform(transform);\n      _transformProps && appendTransformProps(_transformProps);\n    }\n  }\n  return (0, _Matrix2D.toArray)();\n}\nfunction extractTransform(props) {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props;\n  }\n  if (typeof props === 'string') {\n    try {\n      var t = (0, _transform.parse)(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return _Matrix2D.identity;\n    }\n  }\n  var transformProps = props;\n  return transformToMatrix(props2transform(transformProps), transformProps === null || transformProps === void 0 ? void 0 : transformProps.transform);\n}","map":{"version":3,"names":["_Matrix2D","require","_transform","appendTransformProps","props","x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","appendTransform","universal2axis","universal","axisX","axisY","defaultValue","coords","split","length","Array","isArray","isNaN","transformsArrayToProps","transformObjectsArray","forEach","transformObject","keys","Object","console","error","key","value","props2transform","extractedProps","translate","translateX","translateY","origin","scale","skew","warn","tr","or","sc","sk","transformToMatrix","transform","reset","columnMatrix","append","transformProps","t","parse","e","_transformProps","toArray","extractTransform","identity"],"sources":["/home/temo/Desktop/working/Android/Climbing In Georgia Mobile/node_modules/react-native-svg/lib/module/lib/extract/extractTransform.ts"],"sourcesContent":["import type { TransformsStyle } from 'react-native';\nimport { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\nimport { parse } from './transform';\nimport type {\n  ColumnMajorTransformMatrix,\n  NumberProp,\n  TransformedProps,\n  TransformProps,\n} from './types';\n\nfunction appendTransformProps(props: TransformedProps) {\n  const { x, y, originX, originY, scaleX, scaleY, rotation, skewX, skewY } =\n    props;\n  appendTransform(\n    x + originX,\n    y + originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY,\n  );\n}\n\nfunction universal2axis(\n  universal: NumberProp | NumberProp[] | undefined,\n  axisX: NumberProp | void,\n  axisY: NumberProp | void,\n  defaultValue?: number,\n): [number, number] {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function transformsArrayToProps(\n  transformObjectsArray: TransformsStyle['transform'],\n) {\n  const props: TransformProps = {};\n  transformObjectsArray?.forEach((transformObject) => {\n    const keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error(\n        'You must specify exactly one property per transform object.',\n      );\n    }\n    const key = keys[0] as keyof TransformProps;\n    const value = transformObject[key as keyof typeof transformObject];\n    props[key] = value;\n  });\n  return props;\n}\n\nexport function props2transform(\n  props: TransformProps | undefined,\n): TransformedProps | null {\n  if (!props) {\n    return null;\n  }\n  const extractedProps = Array.isArray(props)\n    ? transformsArrayToProps(props)\n    : props;\n  const {\n    rotation,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y,\n  } = extractedProps;\n  if (\n    rotation == null &&\n    translate == null &&\n    translateX == null &&\n    translateY == null &&\n    origin == null &&\n    originX == null &&\n    originY == null &&\n    scale == null &&\n    scaleX == null &&\n    scaleY == null &&\n    skew == null &&\n    skewX == null &&\n    skewY == null &&\n    x == null &&\n    y == null\n  ) {\n    return null;\n  }\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn(\n      'Passing SvgLengthList to x or y attribute where SvgLength expected',\n    );\n  }\n  const tr = universal2axis(\n    translate,\n    translateX || (Array.isArray(x) ? x[0] : x),\n    translateY || (Array.isArray(y) ? y[0] : y),\n  );\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1],\n  };\n}\n\nexport function transformToMatrix(\n  props: TransformedProps | null,\n  transform: TransformProps['transform'],\n): ColumnMajorTransformMatrix | null {\n  if (!props && !transform) {\n    return null;\n  }\n  reset();\n  props && appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        const columnMatrix = transform as ColumnMajorTransformMatrix;\n        append(\n          columnMatrix[0],\n          columnMatrix[1],\n          columnMatrix[2],\n          columnMatrix[3],\n          columnMatrix[4],\n          columnMatrix[5],\n        );\n      } else {\n        const transformProps = props2transform(\n          transformsArrayToProps(transform as TransformsStyle['transform']),\n        );\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      const transformProps = props2transform(transform);\n      transformProps && appendTransformProps(transformProps);\n    }\n  }\n\n  return toArray();\n}\n\nexport default function extractTransform(\n  props: TransformProps | TransformProps['transform'],\n): ColumnMajorTransformMatrix | null {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props as ColumnMajorTransformMatrix;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  // this type is not correct since props can be of type TransformsStyle['transform'] too\n  // but it satisfies TS and should not produce any type errors\n  const transformProps = props as TransformProps;\n  return transformToMatrix(\n    props2transform(transformProps),\n    transformProps?.transform,\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}